//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lang.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, OE=6, CE=7, OB=8, CB=9, AT=10, 
		SEP=11, PLUS=12, ATRIB_PLUS=13, ATRIB_MINUS=14, MINUS=15, MULT=16, DIV=17, 
		AND=18, OR=19, NOT=20, EQ=21, LT=22, GT=23, LE=24, GE=25, NE=26, BOOL_TRUE=27, 
		BOOL_FALSE=28, IF=29, WHILE=30, FOR=31, FUNCTION=32, RETURN=33, THEN=34, 
		ELSE=35, WRITE=36, READ=37, INT=38, DOUBLE=39, STRING=40, BOOLEAN=41, 
		ARRAY=42, ARRAY_INT=43, ARRAY_DOUBLE=44, ARRAY_STRING=45, STR=46, EOL=47, 
		NUM=48, DECIM=49, VAR=50, POSITION=51, COMMENT_LINE=52, COMMENT_BLOCK=53, 
		WS=54;
	public const int
		RULE_prog = 0, RULE_functions = 1, RULE_function = 2, RULE_fnBlock = 3, 
		RULE_fnBody = 4, RULE_params = 5, RULE_line = 6, RULE_funcInvoc = 7, RULE_stmt = 8, 
		RULE_input = 9, RULE_output = 10, RULE_ifst = 11, RULE_ternary = 12, RULE_whilest = 13, 
		RULE_forst = 14, RULE_array = 15, RULE_block = 16, RULE_cond = 17, RULE_atrib = 18, 
		RULE_expr = 19, RULE_term = 20, RULE_factor_array_number = 21, RULE_factor_array_string = 22, 
		RULE_factor = 23;
	public static readonly string[] ruleNames = {
		"prog", "functions", "function", "fnBlock", "fnBody", "params", "line", 
		"funcInvoc", "stmt", "input", "output", "ifst", "ternary", "whilest", 
		"forst", "array", "block", "cond", "atrib", "expr", "term", "factor_array_number", 
		"factor_array_string", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'f'", "'?'", "':'", "'['", "']'", "'('", "')'", "'{'", "'}'", "'='", 
		"','", "'+'", "'+='", "'-='", "'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", 
		"'=='", "'<'", "'>'", "'<='", "'>='", "'!='", "'true'", "'false'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "OE", "CE", "OB", "CB", "AT", "SEP", 
		"PLUS", "ATRIB_PLUS", "ATRIB_MINUS", "MINUS", "MULT", "DIV", "AND", "OR", 
		"NOT", "EQ", "LT", "GT", "LE", "GE", "NE", "BOOL_TRUE", "BOOL_FALSE", 
		"IF", "WHILE", "FOR", "FUNCTION", "RETURN", "THEN", "ELSE", "WRITE", "READ", 
		"INT", "DOUBLE", "STRING", "BOOLEAN", "ARRAY", "ARRAY_INT", "ARRAY_DOUBLE", 
		"ARRAY_STRING", "STR", "EOL", "NUM", "DECIM", "VAR", "POSITION", "COMMENT_LINE", 
		"COMMENT_BLOCK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	 
		public ProgContext() { }
		public virtual void CopyFrom(ProgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgLineContext : ProgContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgLineContext(ProgContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterProgLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitProgLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			_localctx = new ProgLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			functions();
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 49;
				line();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OE) | (1L << NOT) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << WRITE) | (1L << READ) | (1L << INT) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOLEAN) | (1L << ARRAY) | (1L << EOL) | (1L << NUM) | (1L << DECIM) | (1L << VAR) | (1L << COMMENT_LINE) | (1L << COMMENT_BLOCK))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_functions);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				function();
				State = 55;
				functions();
				}
				break;
			case OE:
			case NOT:
			case BOOL_TRUE:
			case BOOL_FALSE:
			case IF:
			case WHILE:
			case FOR:
			case WRITE:
			case READ:
			case INT:
			case DOUBLE:
			case STRING:
			case BOOLEAN:
			case ARRAY:
			case EOL:
			case NUM:
			case DECIM:
			case VAR:
			case COMMENT_LINE:
			case COMMENT_BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(LangParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnBlockContext fnBlock() {
			return GetRuleContext<FnBlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(FUNCTION);
			State = 61;
			Match(VAR);
			State = 62;
			Match(OE);
			State = 63;
			@params();
			State = 64;
			Match(CE);
			State = 65;
			fnBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	 
		public FnBlockContext() { }
		public virtual void CopyFrom(FnBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnBlockLineContext : FnBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		public FnBlockLineContext(FnBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_fnBlock);
		try {
			_localctx = new FnBlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(OB);
			State = 68;
			fnBody();
			State = 69;
			Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBodyContext : ParserRuleContext {
		public FnBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBody; } }
	 
		public FnBodyContext() { }
		public virtual void CopyFrom(FnBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnReturnLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public FnReturnLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnExprLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public FnReturnExprLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnExprLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineMoreContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		public FnBodyLineMoreContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLineMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBodyContext fnBody() {
		FnBodyContext _localctx = new FnBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_fnBody);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new FnBodyLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				line();
				}
				break;
			case 2:
				_localctx = new FnBodyLineMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				line();
				State = 73;
				fnBody();
				}
				break;
			case 3:
				_localctx = new FnReturnExprLineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				Match(RETURN);
				State = 76;
				expr();
				State = 77;
				Match(EOL);
				}
				break;
			case 4:
				_localctx = new FnReturnLineContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 79;
				Match(RETURN);
				State = 80;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(LangParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_params);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(VAR);
				State = 85;
				Match(SEP);
				State = 86;
				@params();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineWhileContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhilestContext whilest() {
			return GetRuleContext<WhilestContext>(0);
		}
		public LineWhileContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineEOLContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineEOLContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineEOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineEOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineEOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineStmtContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineStmtContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockCommentContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_BLOCK() { return GetToken(LangParser.COMMENT_BLOCK, 0); }
		public BlockCommentContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterBlockComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitBlockComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineIfContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstContext ifst() {
			return GetRuleContext<IfstContext>(0);
		}
		public LineIfContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineCommentContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_LINE() { return GetToken(LangParser.COMMENT_LINE, 0); }
		public LineCommentContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineForContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForstContext forst() {
			return GetRuleContext<ForstContext>(0);
		}
		public LineForContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineTernaryContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineTernaryContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTernary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineArrayContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineArrayContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 12, RULE_line);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new LineStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				stmt();
				State = 91;
				Match(EOL);
				}
				break;
			case 2:
				_localctx = new LineIfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				ifst();
				}
				break;
			case 3:
				_localctx = new LineWhileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				whilest();
				}
				break;
			case 4:
				_localctx = new LineForContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				forst();
				}
				break;
			case 5:
				_localctx = new LineTernaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 96;
				ternary();
				State = 97;
				Match(EOL);
				}
				break;
			case 6:
				_localctx = new LineArrayContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 99;
				array();
				State = 100;
				Match(EOL);
				}
				break;
			case 7:
				_localctx = new LineEOLContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 102;
				Match(EOL);
				}
				break;
			case 8:
				_localctx = new LineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 103;
				Match(COMMENT_LINE);
				}
				break;
			case 9:
				_localctx = new BlockCommentContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 104;
				Match(COMMENT_BLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocContext : ParserRuleContext {
		public FuncInvocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvoc; } }
	 
		public FuncInvocContext() { }
		public virtual void CopyFrom(FuncInvocContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvocLineContext : FuncInvocContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FuncInvocLineContext(FuncInvocContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFuncInvocLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFuncInvocLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvocLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncInvocContext funcInvoc() {
		FuncInvocContext _localctx = new FuncInvocContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcInvoc);
		try {
			_localctx = new FuncInvocLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(VAR);
			State = 108;
			Match(OE);
			State = 109;
			@params();
			State = 110;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtOutputContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public StmtOutputContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtOutput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtInputContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public StmtInputContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtAtribContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		public StmtAtribContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAtrib(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineFuncInvocContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncInvocContext funcInvoc() {
			return GetRuleContext<FuncInvocContext>(0);
		}
		public LineFuncInvocContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFuncInvoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new StmtAtribContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				atrib();
				}
				break;
			case 2:
				_localctx = new StmtInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				input();
				}
				break;
			case 3:
				_localctx = new StmtOutputContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 114;
				output();
				}
				break;
			case 4:
				_localctx = new LineFuncInvocContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				funcInvoc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputReadContext : InputContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LangParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(LangParser.BOOLEAN, 0); }
		public InputReadContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterInputRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitInputRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 18, RULE_input);
		int _la;
		try {
			_localctx = new InputReadContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(READ);
			State = 119;
			Match(VAR);
			State = 120;
			((InputReadContext)_localctx).TYPE = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOLEAN))) != 0)) ) {
				((InputReadContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
	 
		public OutputContext() { }
		public virtual void CopyFrom(OutputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputWriteFStrContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangParser.STR, 0); }
		public OutputWriteFStrContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteFStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteFStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteFStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteStrContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangParser.STR, 0); }
		public OutputWriteStrContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteVarContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(LangParser.POSITION, 0); }
		public OutputWriteVarContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputWriteExprContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputWriteExprContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWriteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWriteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWriteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 20, RULE_output);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new OutputWriteVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(WRITE);
				State = 123;
				Match(VAR);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POSITION) {
					{
					State = 124;
					Match(POSITION);
					}
				}

				}
				break;
			case 2:
				_localctx = new OutputWriteFStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				Match(WRITE);
				State = 128;
				Match(T__0);
				State = 129;
				Match(STR);
				}
				break;
			case 3:
				_localctx = new OutputWriteStrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				Match(WRITE);
				State = 131;
				Match(STR);
				}
				break;
			case 4:
				_localctx = new OutputWriteExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				Match(WRITE);
				State = 133;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstContext : ParserRuleContext {
		public IfstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifst; } }
	 
		public IfstContext() { }
		public virtual void CopyFrom(IfstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfstIfElseContext : IfstContext {
		public BlockContext b1;
		public BlockContext b2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfstIfElseContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstIfContext : IfstContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstIfContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstContext ifst() {
		IfstContext _localctx = new IfstContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifst);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new IfstIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(IF);
				State = 137;
				Match(OE);
				State = 138;
				cond(0);
				State = 139;
				Match(CE);
				State = 140;
				block();
				}
				break;
			case 2:
				_localctx = new IfstIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				Match(IF);
				State = 143;
				Match(OE);
				State = 144;
				cond(0);
				State = 145;
				Match(CE);
				State = 146;
				((IfstIfElseContext)_localctx).b1 = block();
				State = 147;
				Match(ELSE);
				State = 148;
				((IfstIfElseContext)_localctx).b2 = block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
	 
		public TernaryContext() { }
		public virtual void CopyFrom(TernaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryCondContext : TernaryContext {
		public IToken e1;
		public IToken e2;
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STR() { return GetTokens(LangParser.STR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR(int i) {
			return GetToken(LangParser.STR, i);
		}
		public TernaryCondContext(TernaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTernaryCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTernaryCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 24, RULE_ternary);
		try {
			_localctx = new TernaryCondContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			cond(0);
			State = 153;
			Match(T__1);
			State = 154;
			((TernaryCondContext)_localctx).e1 = Match(STR);
			State = 155;
			Match(T__2);
			State = 156;
			((TernaryCondContext)_localctx).e2 = Match(STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestContext : ParserRuleContext {
		public WhilestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilest; } }
	 
		public WhilestContext() { }
		public virtual void CopyFrom(WhilestContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhilestWhileContext : WhilestContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhilestWhileContext(WhilestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterWhilestWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitWhilestWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestContext whilest() {
		WhilestContext _localctx = new WhilestContext(Context, State);
		EnterRule(_localctx, 26, RULE_whilest);
		try {
			_localctx = new WhilestWhileContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(WHILE);
			State = 159;
			Match(OE);
			State = 160;
			cond(0);
			State = 161;
			Match(CE);
			State = 162;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstContext : ParserRuleContext {
		public ForstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forst; } }
	 
		public ForstContext() { }
		public virtual void CopyFrom(ForstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForstForContext : ForstContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LangParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForstForContext(ForstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterForstFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitForstFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstContext forst() {
		ForstContext _localctx = new ForstContext(Context, State);
		EnterRule(_localctx, 28, RULE_forst);
		try {
			_localctx = new ForstForContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(FOR);
			State = 165;
			Match(OE);
			State = 166;
			Match(VAR);
			State = 167;
			Match(EOL);
			State = 168;
			cond(0);
			State = 169;
			Match(EOL);
			State = 170;
			atrib();
			State = 171;
			Match(CE);
			State = 172;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	 
		public ArrayContext() { }
		public virtual void CopyFrom(ArrayContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtribArrayStringContext : ArrayContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(LangParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LangParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LangParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Factor_array_stringContext factor_array_string() {
			return GetRuleContext<Factor_array_stringContext>(0);
		}
		public AtribArrayStringContext(ArrayContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribArrayString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribArrayString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribArrayString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribArrayNumberContext : ArrayContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(LangParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LangParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LangParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Factor_array_numberContext factor_array_number() {
			return GetRuleContext<Factor_array_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangParser.DOUBLE, 0); }
		public AtribArrayNumberContext(ArrayContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribArrayNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribArrayNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribArrayNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 30, RULE_array);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new AtribArrayNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(ARRAY);
				State = 175;
				Match(LT);
				State = 176;
				((AtribArrayNumberContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INT || _la==DOUBLE) ) {
					((AtribArrayNumberContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 177;
				Match(GT);
				State = 178;
				Match(VAR);
				State = 179;
				Match(AT);
				State = 180;
				factor_array_number();
				}
				break;
			case 2:
				_localctx = new AtribArrayStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				Match(ARRAY);
				State = 182;
				Match(LT);
				State = 183;
				Match(STRING);
				State = 184;
				Match(GT);
				State = 185;
				Match(VAR);
				State = 186;
				Match(AT);
				State = 187;
				factor_array_string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockLineContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockLineContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			_localctx = new BlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(OB);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 191;
				line();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OE) | (1L << NOT) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << WRITE) | (1L << READ) | (1L << INT) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOLEAN) | (1L << ARRAY) | (1L << EOL) | (1L << NUM) | (1L << DECIM) | (1L << VAR) | (1L << COMMENT_LINE) | (1L << COMMENT_BLOCK))) != 0) );
			State = 196;
			Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondRelopContext : CondContext {
		public ExprContext e1;
		public IToken RELOP;
		public ExprContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(LangParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(LangParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LangParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LangParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(LangParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(LangParser.GE, 0); }
		public CondRelopContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondRelop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondExprContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondAndContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LangParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondAndContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondOrContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LangParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondOrContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondNotContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LangParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public CondNotContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		return cond(0);
	}

	private CondContext cond(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CondContext _localctx = new CondContext(Context, _parentState);
		CondContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_cond, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new CondExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 199;
				expr();
				}
				break;
			case 2:
				{
				_localctx = new CondRelopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				((CondRelopContext)_localctx).e1 = expr();
				State = 201;
				((CondRelopContext)_localctx).RELOP = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << NE))) != 0)) ) {
					((CondRelopContext)_localctx).RELOP = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 202;
				((CondRelopContext)_localctx).e2 = expr();
				}
				break;
			case 3:
				{
				_localctx = new CondNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				Match(NOT);
				State = 205;
				cond(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new CondAndContext(new CondContext(_parentctx, _parentState));
						((CondAndContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 208;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 209;
						Match(AND);
						State = 210;
						((CondAndContext)_localctx).c2 = cond(4);
						}
						break;
					case 2:
						{
						_localctx = new CondOrContext(new CondContext(_parentctx, _parentState));
						((CondOrContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 211;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 212;
						Match(OR);
						State = 213;
						((CondOrContext)_localctx).c2 = cond(3);
						}
						break;
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
	 
		public AtribContext() { }
		public virtual void CopyFrom(AtribContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtribPlusContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB_PLUS() { return GetToken(LangParser.ATRIB_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtribPlusContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribStringContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangParser.STR, 0); }
		public AtribStringContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribMinusContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB_MINUS() { return GetToken(LangParser.ATRIB_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtribMinusContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtribVarContext : AtribContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(LangParser.BOOLEAN, 0); }
		public AtribVarContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterAtribVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitAtribVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 36, RULE_atrib);
		int _la;
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new AtribStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				Match(STRING);
				State = 220;
				Match(VAR);
				State = 221;
				Match(AT);
				State = 222;
				Match(STR);
				}
				break;
			case 2:
				_localctx = new AtribVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				((AtribVarContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE) | (1L << BOOLEAN))) != 0)) ) {
					((AtribVarContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 224;
				Match(VAR);
				State = 225;
				Match(AT);
				State = 226;
				expr();
				}
				break;
			case 3:
				_localctx = new AtribPlusContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				Match(VAR);
				State = 228;
				Match(ATRIB_PLUS);
				State = 229;
				expr();
				}
				break;
			case 4:
				_localctx = new AtribMinusContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 230;
				Match(VAR);
				State = 231;
				Match(ATRIB_MINUS);
				State = 232;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPlusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprPlusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMinusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprMinusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondTernaryContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CondTernaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTernary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ExprPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				term();
				State = 236;
				Match(PLUS);
				State = 237;
				expr();
				}
				break;
			case 2:
				_localctx = new ExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				term();
				State = 240;
				Match(MINUS);
				State = 241;
				expr();
				}
				break;
			case 3:
				_localctx = new CondTernaryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				term();
				State = 244;
				Match(T__1);
				State = 245;
				expr();
				State = 246;
				Match(T__2);
				State = 247;
				expr();
				}
				break;
			case 4:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 249;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermDivContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMultContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LangParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMultContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermFactorContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 40, RULE_term);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new TermMultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				factor();
				State = 253;
				Match(MULT);
				State = 254;
				term();
				}
				break;
			case 2:
				_localctx = new TermDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				factor();
				State = 257;
				Match(DIV);
				State = 258;
				term();
				}
				break;
			case 3:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factor_array_numberContext : ParserRuleContext {
		public Factor_array_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor_array_number; } }
	 
		public Factor_array_numberContext() { }
		public virtual void CopyFrom(Factor_array_numberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Array_numberContext : Factor_array_numberContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(LangParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(LangParser.SEP, i);
		}
		public Array_numberContext(Factor_array_numberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterArray_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitArray_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factor_array_numberContext factor_array_number() {
		Factor_array_numberContext _localctx = new Factor_array_numberContext(Context, State);
		EnterRule(_localctx, 42, RULE_factor_array_number);
		int _la;
		try {
			_localctx = new Array_numberContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(T__3);
			{
			State = 264;
			factor();
			}
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 265;
				Match(SEP);
				{
				State = 266;
				factor();
				}
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factor_array_stringContext : ParserRuleContext {
		public Factor_array_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor_array_string; } }
	 
		public Factor_array_stringContext() { }
		public virtual void CopyFrom(Factor_array_stringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Array_stringContext : Factor_array_stringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STR() { return GetTokens(LangParser.STR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR(int i) {
			return GetToken(LangParser.STR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(LangParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(LangParser.SEP, i);
		}
		public Array_stringContext(Factor_array_stringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterArray_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitArray_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factor_array_stringContext factor_array_string() {
		Factor_array_stringContext _localctx = new Factor_array_stringContext(Context, State);
		EnterRule(_localctx, 44, RULE_factor_array_string);
		int _la;
		try {
			_localctx = new Array_stringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(T__3);
			{
			State = 275;
			Match(STR);
			}
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 276;
				Match(SEP);
				{
				State = 277;
				Match(STR);
				}
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 283;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorNumContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangParser.NUM, 0); }
		public FactorNumContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorBoolFalseContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_FALSE() { return GetToken(LangParser.BOOL_FALSE, 0); }
		public FactorBoolFalseContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorBoolFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorBoolFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorBoolFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorBoolTrueContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TRUE() { return GetToken(LangParser.BOOL_TRUE, 0); }
		public FactorBoolTrueContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorBoolTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorBoolTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorBoolTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorVarContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public FactorVarContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorDecimContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIM() { return GetToken(LangParser.DECIM, 0); }
		public FactorDecimContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorDecim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorDecim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorDecim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FactorExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 46, RULE_factor);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OE:
				_localctx = new FactorExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				Match(OE);
				State = 286;
				expr();
				State = 287;
				Match(CE);
				}
				break;
			case VAR:
				_localctx = new FactorVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				Match(VAR);
				}
				break;
			case DECIM:
				_localctx = new FactorDecimContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 290;
				Match(DECIM);
				}
				break;
			case NUM:
				_localctx = new FactorNumContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 291;
				Match(NUM);
				}
				break;
			case BOOL_TRUE:
				_localctx = new FactorBoolTrueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 292;
				Match(BOOL_TRUE);
				}
				break;
			case BOOL_FALSE:
				_localctx = new FactorBoolFalseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 293;
				Match(BOOL_FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return cond_sempred((CondContext)_localctx, predIndex);
		}
		return true;
	}
	private bool cond_sempred(CondContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x38', '\x12B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x6', 
		'\x2', '\x35', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x36', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '=', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'T', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '[', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'l', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'w', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x80', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x89', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x99', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xBF', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', '\xC3', 
		'\n', '\x12', '\r', '\x12', '\xE', '\x12', '\xC4', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xD1', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xD9', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xDC', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xEC', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xFD', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x108', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x10E', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\x111', '\v', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', 
		'\x18', '\x119', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x11C', '\v', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x129', '\n', '\x19', '\x3', '\x19', 
		'\x2', '\x3', '$', '\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x2', '\x6', '\x3', '\x2', '(', 
		'+', '\x3', '\x2', '(', ')', '\x3', '\x2', '\x17', '\x1C', '\x4', '\x2', 
		'(', ')', '+', '+', '\x2', '\x13E', '\x2', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '<', '\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'Z', '\x3', '\x2', '\x2', '\x2', '\xE', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'm', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x14', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x88', '\x3', '\x2', '\x2', '\x2', '\x18', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xBE', '\x3', '\x2', '\x2', '\x2', '\"', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD0', '\x3', '\x2', '\x2', '\x2', '&', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xFC', '\x3', '\x2', '\x2', '\x2', '*', '\x107', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x109', '\x3', '\x2', '\x2', '\x2', '.', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x5', '\x4', '\x3', '\x2', '\x33', '\x35', '\x5', '\xE', 
		'\b', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x5', '\x6', '\x4', '\x2', '\x39', ':', 
		'\x5', '\x4', '\x3', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', 
		'=', '\x3', '\x2', '\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '=', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\a', '\"', '\x2', '\x2', '?', '@', '\a', '\x34', '\x2', 
		'\x2', '@', '\x41', '\a', '\b', '\x2', '\x2', '\x41', '\x42', '\x5', '\f', 
		'\a', '\x2', '\x42', '\x43', '\a', '\t', '\x2', '\x2', '\x43', '\x44', 
		'\x5', '\b', '\x5', '\x2', '\x44', '\a', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\a', '\n', '\x2', '\x2', '\x46', 'G', '\x5', '\n', '\x6', '\x2', 
		'G', 'H', '\a', '\v', '\x2', '\x2', 'H', '\t', '\x3', '\x2', '\x2', '\x2', 
		'I', 'T', '\x5', '\xE', '\b', '\x2', 'J', 'K', '\x5', '\xE', '\b', '\x2', 
		'K', 'L', '\x5', '\n', '\x6', '\x2', 'L', 'T', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '#', '\x2', '\x2', 'N', 'O', '\x5', '(', '\x15', '\x2', 
		'O', 'P', '\a', '\x31', '\x2', '\x2', 'P', 'T', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '#', '\x2', '\x2', 'R', 'T', '\a', '\x31', '\x2', '\x2', 
		'S', 'I', '\x3', '\x2', '\x2', '\x2', 'S', 'J', '\x3', '\x2', '\x2', '\x2', 
		'S', 'M', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'T', '\v', '\x3', '\x2', '\x2', '\x2', 'U', '[', '\a', '\x34', '\x2', 
		'\x2', 'V', 'W', '\a', '\x34', '\x2', '\x2', 'W', 'X', '\a', '\r', '\x2', 
		'\x2', 'X', '[', '\x5', '\f', '\a', '\x2', 'Y', '[', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'U', '\x3', '\x2', '\x2', '\x2', 'Z', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x5', '\x12', '\n', '\x2', ']', '^', '\a', '\x31', 
		'\x2', '\x2', '^', 'l', '\x3', '\x2', '\x2', '\x2', '_', 'l', '\x5', '\x18', 
		'\r', '\x2', '`', 'l', '\x5', '\x1C', '\xF', '\x2', '\x61', 'l', '\x5', 
		'\x1E', '\x10', '\x2', '\x62', '\x63', '\x5', '\x1A', '\xE', '\x2', '\x63', 
		'\x64', '\a', '\x31', '\x2', '\x2', '\x64', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x5', ' ', '\x11', '\x2', '\x66', 'g', '\a', '\x31', 
		'\x2', '\x2', 'g', 'l', '\x3', '\x2', '\x2', '\x2', 'h', 'l', '\a', '\x31', 
		'\x2', '\x2', 'i', 'l', '\a', '\x36', '\x2', '\x2', 'j', 'l', '\a', '\x37', 
		'\x2', '\x2', 'k', '\\', '\x3', '\x2', '\x2', '\x2', 'k', '_', '\x3', 
		'\x2', '\x2', '\x2', 'k', '`', '\x3', '\x2', '\x2', '\x2', 'k', '\x61', 
		'\x3', '\x2', '\x2', '\x2', 'k', '\x62', '\x3', '\x2', '\x2', '\x2', 'k', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'k', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\x34', '\x2', 
		'\x2', 'n', 'o', '\a', '\b', '\x2', '\x2', 'o', 'p', '\x5', '\f', '\a', 
		'\x2', 'p', 'q', '\a', '\t', '\x2', '\x2', 'q', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'w', '\x5', '&', '\x14', '\x2', 's', 'w', '\x5', '\x14', 
		'\v', '\x2', 't', 'w', '\x5', '\x16', '\f', '\x2', 'u', 'w', '\x5', '\x10', 
		'\t', '\x2', 'v', 'r', '\x3', '\x2', '\x2', '\x2', 'v', 's', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\x13', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', 
		'\'', '\x2', '\x2', 'y', 'z', '\a', '\x34', '\x2', '\x2', 'z', '{', '\t', 
		'\x2', '\x2', '\x2', '{', '\x15', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\a', '&', '\x2', '\x2', '}', '\x7F', '\a', '\x34', '\x2', '\x2', '~', 
		'\x80', '\a', '\x35', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\a', '&', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\x3', '\x2', '\x2', '\x83', '\x89', '\a', '\x30', '\x2', 
		'\x2', '\x84', '\x85', '\a', '&', '\x2', '\x2', '\x85', '\x89', '\a', 
		'\x30', '\x2', '\x2', '\x86', '\x87', '\a', '&', '\x2', '\x2', '\x87', 
		'\x89', '\x5', '(', '\x15', '\x2', '\x88', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x81', '\x3', '\x2', '\x2', '\x2', '\x88', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x1F', '\x2', '\x2', 
		'\x8B', '\x8C', '\a', '\b', '\x2', '\x2', '\x8C', '\x8D', '\x5', '$', 
		'\x13', '\x2', '\x8D', '\x8E', '\a', '\t', '\x2', '\x2', '\x8E', '\x8F', 
		'\x5', '\"', '\x12', '\x2', '\x8F', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\a', '\x1F', '\x2', '\x2', '\x91', '\x92', '\a', '\b', 
		'\x2', '\x2', '\x92', '\x93', '\x5', '$', '\x13', '\x2', '\x93', '\x94', 
		'\a', '\t', '\x2', '\x2', '\x94', '\x95', '\x5', '\"', '\x12', '\x2', 
		'\x95', '\x96', '\a', '%', '\x2', '\x2', '\x96', '\x97', '\x5', '\"', 
		'\x12', '\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', '$', 
		'\x13', '\x2', '\x9B', '\x9C', '\a', '\x4', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '\x30', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x5', '\x2', '\x2', 
		'\x9E', '\x9F', '\a', '\x30', '\x2', '\x2', '\x9F', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\a', ' ', '\x2', '\x2', '\xA1', '\xA2', 
		'\a', '\b', '\x2', '\x2', '\xA2', '\xA3', '\x5', '$', '\x13', '\x2', '\xA3', 
		'\xA4', '\a', '\t', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\"', '\x12', 
		'\x2', '\xA5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 
		'!', '\x2', '\x2', '\xA7', '\xA8', '\a', '\b', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '\x34', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x31', '\x2', '\x2', 
		'\xAA', '\xAB', '\x5', '$', '\x13', '\x2', '\xAB', '\xAC', '\a', '\x31', 
		'\x2', '\x2', '\xAC', '\xAD', '\x5', '&', '\x14', '\x2', '\xAD', '\xAE', 
		'\a', '\t', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\"', '\x12', '\x2', 
		'\xAF', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', ',', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '\x18', '\x2', '\x2', '\xB2', '\xB3', 
		'\t', '\x3', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x19', '\x2', '\x2', 
		'\xB4', '\xB5', '\a', '\x34', '\x2', '\x2', '\xB5', '\xB6', '\a', '\f', 
		'\x2', '\x2', '\xB6', '\xBF', '\x5', ',', '\x17', '\x2', '\xB7', '\xB8', 
		'\a', ',', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x18', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '*', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x19', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x34', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\f', '\x2', '\x2', '\xBD', '\xBF', '\x5', '.', '\x18', '\x2', '\xBE', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '!', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\a', 
		'\n', '\x2', '\x2', '\xC1', '\xC3', '\x5', '\xE', '\b', '\x2', '\xC2', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\a', '\v', '\x2', '\x2', '\xC7', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\b', '\x13', '\x1', '\x2', '\xC9', '\xD1', '\x5', '(', 
		'\x15', '\x2', '\xCA', '\xCB', '\x5', '(', '\x15', '\x2', '\xCB', '\xCC', 
		'\t', '\x4', '\x2', '\x2', '\xCC', '\xCD', '\x5', '(', '\x15', '\x2', 
		'\xCD', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x16', 
		'\x2', '\x2', '\xCF', '\xD1', '\x5', '$', '\x13', '\x3', '\xD0', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\f', '\x5', '\x2', '\x2', '\xD3', '\xD4', 
		'\a', '\x14', '\x2', '\x2', '\xD4', '\xD9', '\x5', '$', '\x13', '\x6', 
		'\xD5', '\xD6', '\f', '\x4', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x15', 
		'\x2', '\x2', '\xD7', '\xD9', '\x5', '$', '\x13', '\x5', '\xD8', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDE', '\a', '*', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x34', 
		'\x2', '\x2', '\xDF', '\xE0', '\a', '\f', '\x2', '\x2', '\xE0', '\xEC', 
		'\a', '\x30', '\x2', '\x2', '\xE1', '\xE2', '\t', '\x5', '\x2', '\x2', 
		'\xE2', '\xE3', '\a', '\x34', '\x2', '\x2', '\xE3', '\xE4', '\a', '\f', 
		'\x2', '\x2', '\xE4', '\xEC', '\x5', '(', '\x15', '\x2', '\xE5', '\xE6', 
		'\a', '\x34', '\x2', '\x2', '\xE6', '\xE7', '\a', '\xF', '\x2', '\x2', 
		'\xE7', '\xEC', '\x5', '(', '\x15', '\x2', '\xE8', '\xE9', '\a', '\x34', 
		'\x2', '\x2', '\xE9', '\xEA', '\a', '\x10', '\x2', '\x2', '\xEA', '\xEC', 
		'\x5', '(', '\x15', '\x2', '\xEB', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEC', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x5', '*', '\x16', '\x2', 
		'\xEE', '\xEF', '\a', '\xE', '\x2', '\x2', '\xEF', '\xF0', '\x5', '(', 
		'\x15', '\x2', '\xF0', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', 
		'\x5', '*', '\x16', '\x2', '\xF2', '\xF3', '\a', '\x11', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', '(', '\x15', '\x2', '\xF4', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\x5', '*', '\x16', '\x2', '\xF6', '\xF7', 
		'\a', '\x4', '\x2', '\x2', '\xF7', '\xF8', '\x5', '(', '\x15', '\x2', 
		'\xF8', '\xF9', '\a', '\x5', '\x2', '\x2', '\xF9', '\xFA', '\x5', '(', 
		'\x15', '\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', 
		'\x5', '*', '\x16', '\x2', '\xFC', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x5', '\x30', '\x19', '\x2', 
		'\xFF', '\x100', '\a', '\x12', '\x2', '\x2', '\x100', '\x101', '\x5', 
		'*', '\x16', '\x2', '\x101', '\x108', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x103', '\x5', '\x30', '\x19', '\x2', '\x103', '\x104', '\a', '\x13', 
		'\x2', '\x2', '\x104', '\x105', '\x5', '*', '\x16', '\x2', '\x105', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x108', '\x5', '\x30', '\x19', '\x2', 
		'\x107', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x107', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x6', '\x2', 
		'\x2', '\x10A', '\x10F', '\x5', '\x30', '\x19', '\x2', '\x10B', '\x10C', 
		'\a', '\r', '\x2', '\x2', '\x10C', '\x10E', '\x5', '\x30', '\x19', '\x2', 
		'\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\a', '\x2', '\x2', '\x113', '-', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\a', '\x6', '\x2', '\x2', '\x115', '\x11A', '\a', '\x30', '\x2', 
		'\x2', '\x116', '\x117', '\a', '\r', '\x2', '\x2', '\x117', '\x119', '\a', 
		'\x30', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\a', '\a', '\x2', '\x2', '\x11E', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x11F', '\x120', '\a', '\b', '\x2', '\x2', '\x120', '\x121', 
		'\x5', '(', '\x15', '\x2', '\x121', '\x122', '\a', '\t', '\x2', '\x2', 
		'\x122', '\x129', '\x3', '\x2', '\x2', '\x2', '\x123', '\x129', '\a', 
		'\x34', '\x2', '\x2', '\x124', '\x129', '\a', '\x33', '\x2', '\x2', '\x125', 
		'\x129', '\a', '\x32', '\x2', '\x2', '\x126', '\x129', '\a', '\x1D', '\x2', 
		'\x2', '\x127', '\x129', '\a', '\x1E', '\x2', '\x2', '\x128', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x124', '\x3', '\x2', '\x2', '\x2', '\x128', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x36', '<', 'S', 'Z', 'k', 'v', '\x7F', '\x88', '\x98', 
		'\xBE', '\xC4', '\xD0', '\xD8', '\xDA', '\xEB', '\xFC', '\x107', '\x10F', 
		'\x11A', '\x128',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
